import os, datetime, pytz, requests, time, sys, json

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
KIND = os.getenv("KIND", "daily")  # daily | weekly | monthly

if not BOT_TOKEN or not CHAT_ID:
    print("‚ùå –ù–µ—Ç BOT_TOKEN –∏–ª–∏ CHAT_ID")
    sys.exit(1)

# -------- Telegram helpers --------
def send_telegram(text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    r = requests.post(url, data={"chat_id": CHAT_ID, "text": text})
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ Telegram:", r.text)
    return r

def send_long(text: str):
    MAX_LEN = 4000
    parts = [text[i:i+MAX_LEN] for i in range(0, len(text), MAX_LEN)]
    for i, part in enumerate(parts, 1):
        send_telegram(part)
        time.sleep(1.2)

# -------- Prompt builder --------
def build_prompt(today, kind):
    extra = ""
    if kind == "weekly":
        extra = "\n–î–æ–±–∞–≤—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–≤—è–∑–∏, –ø—Ä–æ–≥–Ω–æ–∑ 4‚Äì12 –Ω–µ–¥–µ–ª—å."
    elif kind == "monthly":
        extra = "\n–î–æ–±–∞–≤—å –º–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä: –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏, –ø—Ä–æ–≥–Ω–æ–∑ 3‚Äì12 –º–µ—Å—è—Ü–µ–≤."
    return f"""
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫. –°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç—á—ë—Ç (–¥–∞—Ç–∞: {today}) —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:

1) –ú–æ—Å–∫–≤–∞
   - —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ + –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ñ–∞–∫—Ç—ã, –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ–¥—É–∫—Ç—ã, —Å—É–º–º—ã, —Å—Ä–æ–∫–∏)
   - –∏–Ω—Ñ–∞ —Å —Ä–µ—Å—É—Ä—Å–æ–≤ (—Å–≤—è–∑–∫–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –µ—Å–ª–∏ –≤–∞–∂–Ω–æ)
   - –≤—ã–≤–æ–¥—ã –Ω–∞ 6‚Äì24 –º–µ—Å.
2) –†–æ—Å—Å–∏—è
3) –°–®–ê
4) –ï–≤—Ä–æ–ø–∞
5) –ê–∑–∏—è
6) –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫
7) ü§ñ –†–æ–±–æ—Ç—ã ‚Äî —Ç—Ä–µ–Ω–¥—ã, –Ω–æ–≤–æ—Å—Ç–∏, –º–∏–Ω–∏-–≤—ã–∂–∏–º–∫–∏ –∏–∑ —Å—Ç–∞—Ç–µ–π
8) üî¨ –ù–∞—É–∫–∞ –∏ –±—É–¥—É—â–µ–µ ‚Äî –≤—ã–∂–∏–º–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –æ—Ç–∫—Ä—ã—Ç–∏–π, –ø–ª–∞–Ω–æ–≤
9) üß≠ –û–±—â–∏–π –≤—ã–≤–æ–¥ ‚Äî 15 –ø—É–Ω–∫—Ç–æ–≤ ¬´–∫—É–¥–∞ –≤—Å—ë –∏–¥—ë—Ç —Å–µ–π—á–∞—Å¬ª.

–ü–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —Å —Ñ–∞–∫—Ç–∞–º–∏, –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.{extra}
""".strip()

# -------- Report generator --------
def generate_report(kind="daily"):
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.datetime.now(tz)
    today_str = now.strftime("%d.%m.%Y, %H:%M –ú–°–ö")
    prompt = build_prompt(today_str, kind)

    if not OPENAI_API_KEY:
        return "‚ö†Ô∏è –ù–µ—Ç OPENAI_API_KEY. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets ‚Üí Actions."

    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-4o-mini",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π
        "temperature": 0.3,
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –æ—Ç–≤–µ—á–∞–π —Ñ–∞–∫—Ç–∞–º–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 3500
    }
    resp = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, data=json.dumps(data))
    if resp.status_code != 200:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {resp.status_code} {resp.text}"
    try:
        return resp.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {e}\nRAW: {resp.text}"

# -------- Main --------
if __name__ == "__main__":
    text = generate_report(KIND)
    send_long(text)
